name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic version tags (v1.0.0, v1.2.3, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  GO_VERSION: '1.25'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for changelog generation

      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Check if pre-release
        id: check_prerelease
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "$VERSION" =~ -(alpha|beta|rc) ]] || [ "${{ inputs.prerelease }}" = "true" ]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta.1"
            exit 1
          fi

  build-linux:
    name: Build Linux x64
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebp-dev \
            libgif-dev \
            libjpeg-dev \
            pkg-config

      - name: Build static binary
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: amd64
        run: |
          # Build with version info
          go build -v \
            -ldflags="-s -w -X main.version=${{ needs.validate.outputs.version }}" \
            -o webpconvert \
            .

      - name: Verify binary
        run: |
          ./webpconvert --version
          file webpconvert
          ldd webpconvert

      - name: Create archive
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          ARCHIVE_NAME="webpconvert-${VERSION}-linux-amd64.tar.gz"
          tar czf "${ARCHIVE_NAME}" webpconvert README.md
          sha256sum "${ARCHIVE_NAME}" > "${ARCHIVE_NAME}.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: |
            webpconvert-*.tar.gz
            webpconvert-*.sha256
          retention-days: 5

  build-windows:
    name: Build Windows x64
    runs-on: windows-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get GOROOT path
        id: go_path
        shell: pwsh
        run: |
          $goRoot = go env GOROOT
          echo "goroot=$goRoot" >> $env:GITHUB_OUTPUT
          echo "Go root: $goRoot"

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-libwebp
            mingw-w64-x86_64-giflib
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-pkg-config

      - name: Build binary
        shell: msys2 {0}
        env:
          CGO_ENABLED: 1
          GOOS: windows
          GOARCH: amd64
          WINDOWS_GOROOT: ${{ steps.go_path.outputs.goroot }}
        run: |
          # Add Go to MSYS2 PATH using GOROOT from previous step
          # Convert Windows path to MSYS2 format using cygpath
          GO_BIN=$(cygpath -u "$WINDOWS_GOROOT")/bin
          export PATH="${GO_BIN}:$PATH"

          # Verify Go is available
          echo "Checking Go installation..."
          which go
          go version

          # Download dependencies
          go mod download
          go mod verify

          # Build with version info
          echo "Building webpconvert.exe..."
          go build -v \
            -ldflags="-s -w -X main.version=${{ needs.validate.outputs.version }}" \
            -o webpconvert.exe \
            .

      - name: Collect DLLs
        shell: msys2 {0}
        run: |
          mkdir -p release
          cp webpconvert.exe release/

          # Copy required DLLs
          echo "Collecting DLLs..."
          ldd webpconvert.exe | grep mingw64 | awk '{print $3}' | while read dll; do
            if [ -f "$dll" ]; then
              cp "$dll" release/
              echo "Copied: $(basename $dll)"
            fi
          done

          # Copy documentation
          cp README.md release/

      - name: Verify binary
        shell: msys2 {0}
        env:
          WINDOWS_GOROOT: ${{ steps.go_path.outputs.goroot }}
        run: |
          # Add Go to PATH using GOROOT from previous step
          GO_BIN=$(cygpath -u "$WINDOWS_GOROOT")/bin
          export PATH="${GO_BIN}:$PATH"

          cd release
          ./webpconvert.exe --version
          echo "Binary size: $(du -h webpconvert.exe)"

      - name: Create archive
        shell: pwsh
        run: |
          $VERSION = "${{ needs.validate.outputs.version }}"
          $ARCHIVE_NAME = "webpconvert-${VERSION}-windows-amd64.zip"
          Compress-Archive -Path release/* -DestinationPath $ARCHIVE_NAME

          # Generate checksum
          $hash = (Get-FileHash $ARCHIVE_NAME -Algorithm SHA256).Hash
          "$hash  $ARCHIVE_NAME" | Out-File -FilePath "${ARCHIVE_NAME}.sha256" -Encoding ASCII

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: |
            webpconvert-*.zip
            webpconvert-*.sha256
          retention-days: 5

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-linux, build-windows]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"

          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since ${PREVIOUS_TAG}" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" >> RELEASE_NOTES.md
          else
            echo "## Initial Release" > RELEASE_NOTES.md
          fi

          echo "" >> RELEASE_NOTES.md
          echo "## Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Linux" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/webpconvert-${VERSION}-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "tar xzf webpconvert-${VERSION}-linux-amd64.tar.gz" >> RELEASE_NOTES.md
          echo "sudo mv webpconvert /usr/local/bin/" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Windows" >> RELEASE_NOTES.md
          echo "Download \`webpconvert-${VERSION}-windows-amd64.zip\` and extract to a directory in your PATH." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Checksums" >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md
          cat artifacts/*/*.sha256 >> RELEASE_NOTES.md
          echo '```' >> RELEASE_NOTES.md

      - name: Consolidate artifacts
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} release/ \;
          ls -lah release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          prerelease: ${{ needs.validate.outputs.prerelease == 'true' }}
          files: release/*
          draft: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
